<apps version="2.0">
  <app keywords="psoc6,dps310,pressure,temperature,barometer,mtb-flow,xensiv" req_capabilities_v2="[cy8cproto_062_4343w]">
    <name>Pressure Sensor App using DPS310</name>
    <id>cce-mtb-psoc6-dps310</id>
    <category>Community Code Examples</category>
    <uri>https://github.com/Infineon/cce-mtb-psoc6-dps310</uri>
    <description><![CDATA[Disclaimer: This is a community code example (CCE) released for the benefit of the community users. These projects have only been tested for the listed BSPs, tools versions and toolchains documented in the Readme.<br><br>This example demonstrates how to interface the Infineon DPS310 pressure sensors evaluation board with PSoC&#8482; 6 MCU. The sensor-xensive-dps3xx library is used in this example for initializing and reading of temperature and pressure data from the DPS310 Barometric pressure sensor.
    <br><br>For more details, see the <a href="https://github.com/Infineon/cce-mtb-psoc6-dps310/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,LTE,Sequans,Modem,PPP,GM01Q,connectivity" req_capabilities_v2="[cy8ckit_062_wifi_bt]">
    <name>MQTT Client Over LTE</name>
    <id>cce-mtb-mqtt-client-over-lte</id>
    <category>Community Code Examples</category>
    <uri>https://github.com/Infineon/cce-mtb-mqtt-client-over-lte</uri>
    <description><![CDATA[Disclaimer: This is a community code example (CCE) released for the benefit of the community users. These projects have only been tested for the listed BSPs, tools versions and toolchains documented in the Readme.<br><br>This community code example (CCE) demonstrates the implementation of LTE CAT M1 connectivity to PSoC&#8482; 6 via Point-to-Point Protocol (PPP). This CCE demonstrates the steps to add LTE connectivity to any existing Wi-Fi based code example. mtb-example-anycloud-mqtt-client is taken as a reference here. GM01Q_Sequans Module is used for providing LTE connectivity for PSoC&#8482; 6 device. The MQTT Library and lwIP is hosted in PSoC&#8482; 6 and the GM01Q Module communicates to PSoC&#8482; 6 via PPP.In order to test this sample you need Monarch-GM01Q-EVK and one of the PSoC&#8482; 6 kits mentioned in Supported kit section.
    <br><br>For more details, see the <a href="https://github.com/Infineon/cce-mtb-mqtt-client-over-lte/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,lvd,mtb-flow" req_capabilities_v2="[cy8cproto_062_4343w]">
    <name>Low Voltage Detection</name>
    <id>cce-mtb-psoc6-lvd</id>
    <category>Community Code Examples</category>
    <uri>https://github.com/Infineon/cce-mtb-psoc6-lvd</uri>
    <description><![CDATA[Disclaimer: This is a community code example (CCE) released for the benefit of the community users. These projects have only been tested for the listed BSPs, tools versions and toolchains documented in the Readme.<br><br>This code example demonstrates how to configure a PSoC&#8482; 6 Low Voltage Block to generate interrupt when the voltage level crosses the set threshold.
    <br><br>For more details, see the <a href="https://github.com/Infineon/cce-mtb-psoc6-lvd/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,capsense,fss,mtb-flow" req_capabilities_v2="[cy8ckit_149,cy8ckit_145_40xx]">
    <name>CAPSENSE Flanking Sensor Suppression</name>
    <id>cce-mtb-psoc4-capsense-fss</id>
    <category>Community Code Examples</category>
    <uri>https://github.com/Infineon/cce-mtb-psoc4-capsense-fss</uri>
    <description><![CDATA[Disclaimer: This is a community code example (CCE) released for the benefit of the community users. These projects have only been tested for the listed BSPs, tools versions and toolchains documented in the Readme.<br><br>This code example implements Flanking Sensor Suppression (FSS) in PSoC&#8482; 4 devices. FSS eliminates false touches by distinguishing between signals from closely spaced buttons. In the project, three sensors have been used to demonstrate FSS. Whenever multiple sensors are touched, only the sensor whose touch was detected first remains active, and the other sensors are rendered inactive, i.e., their touch (if any) is rendered invalid until the sensor whose touch was detected first is active. This eliminates sensors, which are closely spaced, from being falsely triggered at the same time.
    <br><br>For more details, see the <a href="https://github.com/Infineon/cce-mtb-psoc4-capsense-fss/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc61,mcuboot,cce,bootloader" req_capabilities_v2="[cy8ckit_062s2_43012]">
    <name>MCUboot based Basic Bootloader for PSoC 61</name>
    <id>cce-mtb-psoc61-mcuboot-bootloader</id>
    <category>Community Code Examples</category>
    <uri>https://github.com/Infineon/cce-mtb-psoc61-mcuboot-bootloader</uri>
    <description><![CDATA[Disclaimer: This is a community code example (CCE) released for the benefit of the community users. These projects have only been tested for the listed BSPs, tools versions and toolchains documented in the Readme.<br><br>They are intended to demonstrate how a solution / concept / use-case can be achieved on a particular device.
      This community code example (CCE) demonstrates the implementation of MCUBoot based bootloader for PSoC&#8482; 61 MCU devices. This CCE is derived from mtb-example-psoc6-mcuboot-basic and PSoC&#8482; 61 support to run both Application and Bootloader from CM4 CPU is added.
      In order to test this sample you need target board with PSoC&#8482; 61. You can replace the PSoC&#8482; 6 IC on one of the PSoC&#8482; 6 development kits with PSoC&#8482; 61 MCU IC.
    <br><br>For more details, see the <a href="https://github.com/Infineon/cce-mtb-psoc61-mcuboot-bootloader/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" tools_max_version="3.0.1" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" tools_max_version="3.0.1" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc61,ubm,mcuboot,cce,bootloader" req_capabilities_v2="[cy8ckit_062s2_43012]">
    <name>PSoC 61 UBM controller application</name>
    <id>cce-mtb-psoc6-ubm-controller</id>
    <category>Community Code Examples</category>
    <uri>https://github.com/Infineon/cce-mtb-psoc6-ubm-controller</uri>
    <description><![CDATA[Disclaimer: This is a community code example (CCE) released for the benefit of the community users. These projects have only been tested for the listed BSPs, tools versions and toolchains documented in the Readme.<br><br>They are intended to demonstrate how a solution / concept / use-case can be achieved on a particular device.
      This is a basic code example to showcase the Universal Backplane Management (UBM) middleware features. The code example details how to configure the UBM hardware and illustrates the firmware update using the MCUboot library.
      In order to test this sample you need target board with PSoC&#8482; 61. You can replace the PSoC&#8482; 6 IC on one of the PSoC&#8482; 6 development kits with PSoC&#8482; 61 MCU IC.
    <br><br>For more details, see the <a href="https://github.com/Infineon/cce-mtb-psoc6-ubm-controller/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" tools_max_version="3.0.1" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" tools_max_version="3.0.1" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,capsense,pipeline,scanning" req_capabilities_v2="[cy8ckit_149]">
    <name>PSoC4 CAPSENSE with Pipeline Scanning</name>
    <id>cce-mtb-psoc4-capsense-pipeline-scanning</id>
    <category>Community Code Examples</category>
    <uri>https://github.com/Infineon/cce-mtb-psoc4-capsense-pipeline-scanning</uri>
    <description><![CDATA[Disclaimer: This is a community code example (CCE) released for the benefit of the community users. These projects have only been tested for the listed BSPs, tools versions and toolchains documented in the Readme.<br><br>They are intended to demonstrate how a solution / concept / use-case can be achieved on a particular device.
      This code example demonstrates how to implement pipeline scanning in CAPSENSE&#8482; to improve performance. When a particular widget is being processed, the next widget in line can be scanned parallelly. This is better than conventional method of scanning all the widgets and then processing the scanned data later altogether. This reduces net scan time for the application.
    <br><br>For more details, see the <a href="https://github.com/Infineon/cce-mtb-psoc4-capsense-pipeline-scanning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,Bluetooth,A2DP,mtb-flow" req_capabilities_v2="[cy8ckit_062s2_43012,cy8cproto_062_4343w]">
    <name>PSoC6 Bluetooth A2DP Source</name>
    <id>cce-mtb-psoc6-bt-a2dp-source</id>
    <category>Community Code Examples</category>
    <uri>https://github.com/Infineon/cce-mtb-psoc6-bt-a2dp-source</uri>
    <description><![CDATA[Disclaimer: This is a community code example (CCE) 
    released for the benefit of the community users. These projects have only 
    been tested for the listed BSPs, tools versions and toolchains documented in 
    the Readme.<br><br>This application demonstrates Bluetooth&#174; A2DP audio streaming at 48KHz, 16 bit, stereo on PSoC&#8482; 6 devices. <br><br>For more details, see the 
    <a href="https://github.com/Infineon/cce-mtb-psoc6-bt-a2dp-source/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,SAR,ADC,mtb-flow" req_capabilities_v2="[cy8ckit_062s2_43012,cy8cproto_062_4343w, cy8ckit_062_wifi_bt]">
    <name>PSoC6 Extending the number of SAR ADC channels</name>
    <id>cce-mtb-psoc6-amux-sar-adc</id>
    <category>Community Code Examples</category>
    <uri>https://github.com/Infineon/cce-mtb-psoc6-amux-sar-adc</uri>
    <description><![CDATA[Disclaimer: This is a community code example (CCE) 
    released for the benefit of the community users. These projects have only 
    been tested for the listed BSPs, tools versions and toolchains documented in 
    the Readme.<br><br>This code example demonstrates how to extend the number of SAR ADC channels to virtually any available analog pin in the device without much impact on the sampling speed. It is implemented totally in hardware by using the global analog mux, instead of the SAR mux sequencer <br><br>For more details, see the 
    <a href="https://github.com/Infineon/cce-mtb-psoc6-amux-sar-adc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,tcpwm,timer,interrupt,mtb-flow" req_capabilities_v2="[cy8ckit_062_ble,cy8ckit_062s2_43012,cy8cproto_062_4343w, cy8ckit_062_wifi_bt]">
    <name>PSoC6 MCU: Interrupt TCPWM</name>
    <id>cce-mtb-psoc6-tcpwm-interrupt</id>
    <category>Community Code Examples</category>
    <uri>https://github.com/Infineon/cce-mtb-psoc6-tcpwm-interrupt</uri>
    <description><![CDATA[Disclaimer: This is a community code example (CCE) 
    released for the benefit of the community users. These projects have only 
    been tested for the listed BSPs, tools versions and toolchains documented in 
    the Readme.<br><br>This code example demonstrates the generation of a periodic interrupt using timer counter PWM (TCPWM) in continuous up counter mode. <br><br>For more details, see the 
    <a href="https://github.com/Infineon/cce-mtb-psoc6-tcpwm-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" tools_max_version="3.0.1" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" tools_max_version="3.0.1" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc1300,pmsm,foc,motor-control,sensorless,mtb-flow" req_capabilities_v2="[kit_xmc13_boot_001]">
    <name>XMC1300 PMSM FOC Sensorless</name>
    <id>cce-mtb-xmc1300-pmsm-foc-sl</id>
    <category>Community Code Examples</category>
    <uri>https://github.com/Infineon/cce-mtb-xmc1300-pmsm-foc-sl</uri>
    <description><![CDATA[Disclaimer: This is a community code example (CCE) released for the benefit of the community users. These projects have only been tested for the listed BSPs, tools versions and toolchains documented in the Readme.<br><br>This code example demonstrates the sensorless PMSM FOC motor control application using XMC1300. In order to test this software, XMC1000 Motor Control Application Kit is needed. This kit includes an XMC1300 board and a PMSM Low Voltage Motor Card with a 3-phase motor.
    <br><br>For more details, see the <a href="https://github.com/Infineon/cce-mtb-xmc1300-pmsm-foc-sl/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>xmc1300</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.1.0" tools_max_version="3.1.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.1.0" tools_max_version="3.1.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
</apps>
